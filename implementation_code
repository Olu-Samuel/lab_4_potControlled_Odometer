#include <xc.h>
#define _XTAL_FREQ 20000000
#define RS RD2
#define EN RD3
#define D4 RD4
#define D5 RD5
#define D6 RD6
#define D7 RD7
#define SBIT_ADON     0
#define SBIT_CHS0     3
#define SBIT_CHS1     3
#define SBIT_ADFM     7

// Configuration bits
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = ON       // Power-up Timer Enable bit (PWRT enabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

//ADC Functions from embedded explore reviewed
void ADC_Init()
 {
   ADCON0 = 0x00;               // sampling freq=osc_freq/2,ADC off initially
   ADCON1 = (1 << SBIT_ADFM);   // ADC result configured as right justified  
   //ADCON1 = 0xC0;
}

int ADC_Read(int adcChannel)
 {  
    ADCON0 = (1<<SBIT_ADON) | (adcChannel < SBIT_CHS0) | (adcChannel < SBIT_CHS1);  // select required channel and turn ON ADC
    GO=1;                                                // Start ADC conversion
    while(GO_DONE==1);                                   // Wait for the conversion to complete
                                                         // GO_DONE bit will be cleared once conversion is complete
    return((ADRESH << 8) + ADRESL);                      // return right justified 10-bit result
 }
 
//LCD Functions Developed by Circuit Digest.
void Lcd_SetBit(char data_bit) //Based on the Hex value Set the Bits of the Data Lines
{
if(data_bit& 1) 
D4 = 1;
else
D4 = 0;
 
if(data_bit& 2)
D5 = 1;
else
D5 = 0;
 
if(data_bit& 4)
D6 = 1;
else
D6 = 0;
 
if(data_bit& 8) 
D7 = 1;
else
D7 = 0;
}
 
void Lcd_Cmd(char a)
{
RS = 0;           
Lcd_SetBit(a); //Incoming Hex value
EN  = 1;         
        __delay_ms(4);
        EN  = 0;         
}
 
void Lcd_Clear()
{
Lcd_Cmd(0); //Clear the LCD
Lcd_Cmd(1); //Move the curser to first position
}
 
void Lcd_Set_Cursor(char a, char b)
{
char temp,z,y;
if(a== 1)
{
 temp = 0x80 + b - 1; //80H is used to move the curser
z = temp>>4; //Lower 8-bits
y = temp & 0x0F; //Upper 8-bits
Lcd_Cmd(z); //Set Row
Lcd_Cmd(y); //Set Column
}
else if(a== 2)
{
temp = 0xC0 + b - 1;
z = temp>>4; //Lower 8-bits
y = temp & 0x0F; //Upper 8-bits
Lcd_Cmd(z); //Set Row
Lcd_Cmd(y); //Set Column
}
}
 
void Lcd_Start()
{
  Lcd_SetBit(0x00);
  for(int i=1065244; i<=0; i--)  NOP();  
  Lcd_Cmd(0x03);
__delay_ms(5);
  Lcd_Cmd(0x03);
__delay_ms(11);
  Lcd_Cmd(0x03); 
  Lcd_Cmd(0x02); //02H is used for Return home -> Clears the RAM and initializes the LCD
  Lcd_Cmd(0x02); //02H is used for Return home -> Clears the RAM and initializes the LCD
  Lcd_Cmd(0x08); //Select Row 1
  Lcd_Cmd(0x00); //Clear Row 1 Display
  Lcd_Cmd(0x0C); //Select Row 2
  Lcd_Cmd(0x00); //Clear Row 2 Display
  Lcd_Cmd(0x06);
}
 
void Lcd_Print_Char(char data)  //Send 8-bits through 4-bit mode
{
   char Lower_Nibble,Upper_Nibble;
   Lower_Nibble = data&0x0F;
   Upper_Nibble = data&0xF0;
   RS = 1;             // => RS = 1
   Lcd_SetBit(Upper_Nibble>>4);             //Send upper half by shifting by 4
   EN = 1;
   for(int i=2130483; i<=0; i--)  NOP(); 
   EN = 0;
   Lcd_SetBit(Lower_Nibble); //Send Lower half
   EN = 1;
   for(int i=2130483; i<=0; i--)  NOP();
   EN = 0;
}
 
void Lcd_Print_String(char *a)
{
int i;
for(i=0;a[i]!='\0';i++)
  Lcd_Print_Char(a[i]);  //Split the string using pointers and call the Char function 
}
/**End of LCD Functions**/
 
/*Interrupt function ***/
void __interrupt() ISR_example()
{
        if (INTF==1) //External Interrupt detected
        { 
            Lcd_Clear();
            Lcd_Set_Cursor(1,1);
            Lcd_Print_String("  Ext. ISR");
            Lcd_Set_Cursor(2,1);
            Lcd_Print_String("  Drive Safely");
            INTF = 0;          // clear the interrupt flag after done with it
           __delay_ms(2000);
            Lcd_Clear();
        }
}
/*End of Interrupt Function*/

int speed = 0;
int distance = 0;
int totalDist = 0;
int adcValue=0;
char ch1,ch2,ch3,ch4;

void speedRead(void)
{
    adcValue = ADC_Read(0);                     // Read the ADC value of channel zero
        
        // Speed range 0 - 204km/hr
        ch2 = (((adcValue/5) & 0xff)/100)%10;       // Mapping voltage level to hundred position on km/hr (Max speed 204km/hr)
        ch3 = (((adcValue/5) & 0xff)/10)%10;        // Mapping voltage level to ten position on km/hr
        ch4 = (((adcValue/5) & 0xff)/1)%10;         // Mapping voltage level to unit position on km/hr     (Min speed 0km/hr)
        Lcd_Set_Cursor(1,1);
        Lcd_Print_String("Speed: ");                  // Print string on if condition is TRUE
        Lcd_Set_Cursor(1,8);                        // Set cursor on display at row 2 column 4
        Lcd_Print_Char(ch2+'0');                    // Print values to display
        Lcd_Print_Char(ch3+'0');                    // Print values to display
        Lcd_Print_Char(ch4+'0');                    // Print values to display
        Lcd_Set_Cursor(1,11);                        // Set cursor on display at row 2 column 8
        Lcd_Print_String(" Km/hr");                // Print string on if condition is TRUE
}

void overSpeedRead(void)
{
    Lcd_Clear();
            Lcd_Set_Cursor(1,1);                    // Set cursor on display at row 1 column 1
            Lcd_Print_String("  Max speed");        // Print string on if condition is TRUE
            Lcd_Set_Cursor(2,1);                    // Set cursor on display at row 2 column 1
            Lcd_Print_String("  Drive Safely");     // Print string on if condition is TRUE
            RC5 = 1;
            distance++;
            
            __delay_ms(2000);
}

int main()
{
    ADC_Init();                 // Initialize the ADC module
    TRISC = 0xDF;               // PORTC declared as output for interfacing LCD
    RC5 = 0;                    // DEfine the RC% pin as output to 
    TRISD = 0x00;               // PORTD declared as output for interfacing LCD
    TRISB0 = 1;                 // DEfine the RB0 pin as input to use as interrupt pin
    OPTION_REG = 0b00000000;    // Enables PULL UPs
    GIE=1;                      // Enable Global Interrupt
    PEIE=1;                     // Enable the Peripheral Interrupt
    INTE = 1;                   // Enable RB0 as external Interrupt pin
    Lcd_Start();
    
    while(1)
    {
        speedRead();
        ch2 = (((distance/5) & 0xff)/100)%10;       // Mapping voltage level to hundred position on km/hr (Max speed 204km/hr)
        ch3 = (((distance/5) & 0xff)/10)%10;        // Mapping voltage level to ten position on km/hr
        ch4 = (((distance/5) & 0xff)/1)%10; 
        Lcd_Set_Cursor(2,1);
        Lcd_Print_String("Distance: ");
        Lcd_Set_Cursor(2,11);                        // Set cursor on display at row 2 column 4
        Lcd_Print_Char(ch2+'0');                    // Print values to display
        Lcd_Print_Char(ch3+'0');                    // Print values to display
        Lcd_Print_Char(ch4+'0');                    // Print values to display
        Lcd_Set_Cursor(2,14);                        // Set cursor on display at row 2 column 8
        Lcd_Print_String(" Km");                // Print string on if condition is TRUE
        //__delay_ms(500);
        
        // Over-speed condition
        if ((((adcValue/5) & 0xff)/10) >= 8)        // Alert for over speeding at 80km/hr and above
        {
            overSpeedRead();
            
            __delay_ms(2000);                        // delay and keep alerting until condition is FALSE
           
            Lcd_Clear();
            RC5 = 0;
        }
       
        if ((((adcValue/5) & 0xff)/1) > 0)        // Alert for over speeding at 80km/hr and above
        {
                ch2 = (((distance/5) & 0xff)/100)%10;       // Mapping voltage level to hundred position on km/hr (Max speed 204km/hr)
                ch3 = (((distance/5) & 0xff)/10)%10;        // Mapping voltage level to ten position on km/hr
                ch4 = (((distance/5) & 0xff)/1)%10; 
                Lcd_Set_Cursor(2,1);
                Lcd_Print_String("Distance: ");
                Lcd_Set_Cursor(2,11);                        // Set cursor on display at row 2 column 4
                Lcd_Print_Char(ch2+'0');                    // Print values to display
                Lcd_Print_Char(ch3+'0');                    // Print values to display
                Lcd_Print_Char(ch4+'0');                    // Print values to display
                Lcd_Set_Cursor(2,14);                        // Set cursor on display at row 2 column 8
                Lcd_Print_String(" Km");                // Print string on if condition is TRUE
                
                distance++;
        }
        
        totalDist = distance;
        if ((((adcValue/5) & 0xff)/1) == 0)        // Alert for over speeding at 80km/hr and above
        {
            
            distance = 0;
        
        
        ch2 = (((totalDist/5) & 0xff)/100)%10;       // Mapping voltage level to hundred position on km/hr (Max speed 204km/hr)
        ch3 = (((totalDist/5) & 0xff)/10)%10;        // Mapping voltage level to ten position on km/hr
        ch4 = (((totalDist/5) & 0xff)/1)%10; 
        Lcd_Set_Cursor(2,1);
        Lcd_Set_Cursor(2,1);
        Lcd_Print_String("Tot_Dist: ");
        Lcd_Set_Cursor(2,11);                        // Set cursor on display at row 2 column 4
        Lcd_Print_Char(ch2+'0');                    // Print values to display
        Lcd_Print_Char(ch3+'0');                    // Print values to display
        Lcd_Print_Char(ch4+'0');                    // Print values to display
        Lcd_Set_Cursor(2,14);                        // Set cursor on display at row 2 column 8
        Lcd_Print_String(" Km");                // Print string on if condition is TRUE
        
        __delay_ms(5000);                        // delay and keep alerting until condition is FALSE
           
        Lcd_Clear();
        }
    }
    return 0;
}
